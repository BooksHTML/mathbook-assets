@import "convert-length";

$base-font-size: $typography-font-size-base;
$base-line-height: $typography-line-height-computed;
$browser-default-font-size: 16px;
$min-line-padding: 2px !default;
$round-to-nearest-half-line: true;
$relative-font-sizing: true;
$rhythm-unit: "em" !default;
$base-leader: convert-length($base-line-height - $base-font-size, $rhythm-unit, $base-font-size);
$base-half-leader: $base-leader / 2;

@mixin establish-baseline($font-size: $base-font-size) {
    $relative-size: 100% * $font-size / $browser-default-font-size;

    html {
        font-size: if($relative-font-sizing, $relative-size, $font-size);
        line-height: round($base-line-height);
    }
}

@mixin rhythm(
    $leader: 1,
    $padding-leader: 0,
    $padding-trailer: $padding-leader,
    $trailer: $leader,
    $font-size: $base-font-size
) {
    @include leader($leader, $font-size);
    @include padding-leader($padding-leader, $font-size);
    @include padding-trailer($padding-trailer, $font-size);
    @include trailer($trailer, $font-size);
}

@function rhythm($lines: 1, $font-size: $base-font-size, $offset: 0) {
    $rhythm: convert-length($lines * $base-line-height - $offset, $rhythm-unit, $font-size);
    @if unit($rhythm) == px {
        $rhythm: floor($rhythm);
    }
    @return $rhythm;
}

@mixin padding-leader($lines: 1, $font-size: $base-font-size) {
    @include output-rhythm(padding-top, rhythm($lines, $font-size));
}

@mixin padding-trailer($lines: 1, $font-size: $base-font-size) {
    @include output-rhythm(padding-bottom, rhythm($lines, $font-size));
}

@mixin margin-leader($lines: 1, $font-size: $base-font-size) {
    @include output-rhythm(margin-top, rhythm($lines, $font-size));
}

@mixin margin-trailer($lines: 1, $font-size: $base-font-size) {
    @include output-rhythm(margin-bottom, rhythm($lines, $font-size));
}

@mixin output-rhythm($property, $values) {
    @if $rhythm-unit == rem and $rem-with-px-fallback {
        @include rem($property, $values);
    }
    @else {
        $output: ();
        @each $value in $values {
            $output: join($output, $value);
        }
        #{$property}: $output;
    }
}

@function lines-for-font-size($font-size) {
    $rounded-to-half: ceil(2 * $font-size / $base-line-height) / 2;
    $rounded-to-one: ceil($font-size / $base-line-height);
    $lines: if($round-to-nearest-half-line, $rounded-to-half, $rounded-to-one);
    @if ($lines * $base-line-height - $font-size) < ($min-line-padding * 2) {
        $lines: $lines + if($round-to-nearest-half-line, 0.5, 1);
    }
    @return $lines;
}

@mixin adjust-font-size-to($to-size, $lines: auto, $from-size: $base-font-size) {
    $to-size: convert-length($to-size, px, $from-size);
    @if $lines == auto {
        $lines: lines-for-font-size($to-size);
    }
    @include output-rhythm(font-size, convert-length($to-size, $rhythm-unit, $from-size));
    @include adjust-leading-to($lines, $to-size);
}

@mixin adjust-leading-to($lines, $font-size: $base-font-size) {
    @include output-rhythm(line-height, rhythm($lines, $font-size));
}

@mixin rhythm-borders(
    $width: $default-rhythm-border-width,
    $lines: 1,
    $font-size: $base-font-size,
    $border-style: $default-rhythm-border-style
) {
    @include apply-side-rhythm-border(all, $width, $lines, $font-size, $border-style);
}

@mixin apply-side-rhythm-border(
    $side,
    $width: $default-rhythm-border-width,
    $lines: 1,
    $font-size: $base-font-size,
    $border-style: $default-rhythm-border-style
) {
    $border-prop: if($side == all, border, border-#{$side});
    @include output-rhythm(#{$border-prop}-width, convert-length($width, $rhythm-unit, $font-size));
    #{$border-prop}-style: nth($border-style, 1);
    @if type-of($border-style) == list and length($border-style) > 1 {
        #{$border-prop}-color: nth($border-style, 2);
    }
    $padding-prop: if($side == all, padding, padding-#{$side});
    @include output-rhythm(#{$padding-prop}, rhythm($lines, $font-size, $offset: $width));
}
