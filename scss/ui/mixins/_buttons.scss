// TODO make more portable with default module variables pattern
@import "compass/css3/user-interface";
@import "compass/css3/box-shadow";
@import "compass/css3/images";
@import "compass/css3/border-radius";
@import "compass/css3/inline-block";
@import "compass/typography/text/replacement";
@import "compass/typography/text/ellipsis";
@import "./triangle";

@mixin button-base() {
    @include inline-block();

    cursor:pointer;
    @include user-select(none);
    outline:none; /* Don't display outline on click */
    @include ellipsis();

    /** 
     * Remove stupid firefox dotted border on button click 
     * See http://stackoverflow.com/a/199319/1599617
     */
    &::-moz-focus-inner {
        border: 0;
    }
}

@mixin button-minimalist() {
    text-transform:uppercase;
    background: transparent;
    color: $color;
    border: 2px solid;
    @include border-radius(2px);
    @include transition-property(color, border-color);

    &:hover, &:focus {
        color: $color-hover;
    }

    &:active, &.active {
        color: $color-active;
    }

    &.disabled {
        &:hover, &:focus, &:active, &.active {
            cursor:default;
            color:$color;
            opacity:.5;
        }
    }
}

@mixin button-remove-link-properties($color: inherit) {
    /* Remove link appearance */
    &:link, &:visited, &:hover, &:focus, &:active {
        color:$color;
        text-decoration:none;
    }
}

@mixin button-depressable() {
    &:active, &.active {
        @include box-shadow(rgba(black,.5) 0 2px 5px inset);
    }
}

// Note that $icon-placement:inline will not work well with button-hide-text() 
@mixin button-with-icon(
    $icon, // The content of the icon (match to icon font values)
    $icon-size, // The size of the icon itself 
    $icon-box-size, // The size of the icon and it's surrounding padding 
    $icon-pseudo: before, // The pseduo-selector of the icon: before|after
    $icon-placement: left // left | center | right | inline
) {
    @include button-icon($icon, $icon-size, $icon-box-size, $icon-pseudo);
    @if($icon-placement != inline) {
        @include button-icon-padding($icon-box-size, $icon-placement);
        @include button-icon-absolute(
                    $icon-box-size, 
                    $icon-pseudo, 
                    $icon-placement);
    } @else {
        &:#{$icon-pseudo} {
            @include inline-block(baseline);
        }
    }
}

// Note that $icon-placement:inline will not work well with button-hide-text() 
@mixin button-with-icon-responsive(
    $icon, // The content of the icon (match to icon font values)
    $icon-size, // The size of the icon itself 
    $icon-box-size, // The size of the icon and it's surrounding padding 
    $icon-pseudo: before,
    $icon-placement:left, // left | center | right 
    $icon-only-breakpoint:infinity  // Point below which button is icon only
) {

    // The inline option doesn't work with hide-text, so it is not supported.
    // If the user uses it, we'll try to intelligently determine the placement.
    /*@if($icon-placement == inline) {*/
        /*@if($icon-pseudo == before) {*/
            /*$icon-placement: left;*/
        /*} @else {*/
            /*$icon-placement: right;*/
        /*}*/
    /*}*/

    $hide-direction: $icon-placement;
    @if($icon-placement == center or $icon-placement == inline) {
        $hide-direction: left;
    }

    @include button-with-icon(
                $icon, 
                $icon-size, 
                $icon-box-size, 
                $icon-pseudo, 
                $icon-placement);

    @if($icon-only-breakpoint == infinity) {
        @include button-hide-text(
            $icon-box-size,
            $icon-pseudo,
            $hide-direction);
    } @else {
        @media screen and (max-width: $icon-only-breakpoint) {
            /* icon only */
            @include button-hide-text(
                $icon-box-size,
                $icon-pseudo,
                $hide-direction);
        } 
    }
}

// You can customize the icon element like so:
//     @include with-icon() {
//         color: red; /* icon will be red, element text remains normal */
//     }
@mixin button-icon(
    $icon-content, 
    $icon-size, 
    $icon-box-size,
    $icon-pseudo: before
){
    &:#{$icon-pseudo} {
        content: $icon-content; // TODO change to menu icon
        text-align:center; // We want the icon to be centered within icon-box
        font-size:$icon-size;
        font-family: $ui-font-family-icon;
        line-height:$icon-box-size;
        width:$icon-box-size;
        text-indent:0; /* So text isn't removed from this too */
        @include inline-block(baseline);

        // Allow caller to easily customize the icon
        @content;
    }
}

@mixin button-icon-padding(
    $icon-box-size,
    $icon-placement:left    
) {
    @if $icon-placement == left {
        padding-left:$icon-box-size;
    } @else if $icon-placement == right {
        padding-right:$icon-box-size;
    }
}

@mixin button-icon-absolute(
    $icon-box-size,
    $icon-pseudo:before,
    $icon-placement: center // left|center|right
) {

    position:relative;

    &:#{$icon-pseudo} {
        position:absolute;

        @if($icon-placement == center) {
            left: 50%;
            right:auto;
            margin-left: -$icon-box-size/2;
        } @else if($icon-placement == left) {
            left: 0;
            right:auto;
        } @else {
            right:0;
            left:auto;
        }

        top:50%;
        bottom: auto;
        margin-top: -$icon-box-size/2;
        @content;
    }
}

@mixin button-hide-text(
    $icon-box-size, 
    $icon-pseudo: before,
    $hide-direction: left,
    $icon-placement: center
) {
    text-align:center;
    @include hide-text($hide-direction);
    @include button-icon-absolute($icon-box-size, $icon-pseudo, $icon-placement);
}

@mixin ui() {
    .ui-link {
        @include ui-link();
    }
    .ui-link-directional-right {
        @include ui-link-directional($direction:right);
    }
    .ui-link-directional-left {
        @include ui-link-directional($direction:left);
    }
    .ui-button-directional-right {
        @include ui-button-directional($direction:right);
    }
    .ui-button-directional-left {
        @include ui-button-directional($direction:left);
    }
}

// WebKit-style focus
// Taken from sass-blueprint
// https://github.com/thomas-mcdonald/bootstrap-sass/blob/34d538dc33b302a02e86ccec3e0a93fbf41f0bfa/vendor/assets/stylesheets/bootstrap/_mixins.scss
@mixin ui-tab-focus() {
  // Default
  outline: thin dotted #333;
  // WebKit
  outline: 5px auto -webkit-focus-ring-color;
  outline-offset: -2px;
}

// Standard link
@mixin ui-link(
    $color: $link-color, 
    $color-hover:$link-hover-color
){
    &, &:link, &:visited {
        color: $color;
        text-decoration: none;
        font-family:inherit; // Overide beezer.css
    }

    &:hover,
    &:focus {
        color: $color-hover;
        text-decoration: underline;
        cursor:pointer;
    }

    &:focus {
      @include ui-tab-focus();
    }
}

// Large, button-like links with arrows for linking to other pages
@mixin ui-link-directional (
    $direction: right,

    $color: $ui-link-block-color,
    $color-hover: $ui-link-block-color-hover,
    $color-active: $ui-link-block-color-active,

    $bg: $ui-link-block-bg,
    $bg-hover: $ui-link-block-bg-hover,
    $bg-active: $ui-link-block-bg-active,

    $arrow-color: default, 
    $arrow-color-hover: default, 
    $arrow-color-active: default 
) {

    @if($arrow-color == default) {
        $arrow-color: darken($bg, 10%);
    }
    @if($arrow-color-hover == default) {
        $arrow-color-hover: $color-hover;
    }
    @if($arrow-color-active == default) {
        $arrow-color-active: $color-active;
    }

    // Due to the rotation, these are opposite (width is height)
    $triangle-height: .4em;
    $triangle-width: .8em;

    &, &:visited {
        position:relative;
        display:block;
        text-decoration:none;
        padding:.7em;
        margin-bottom:.175em;
        background: $bg;
        text-decoration:none;
        @include border-radius(3px);
        
        // Place arrow on correct side
        @if $direction == right {
            padding-right:1.7em;
            &:after { right:1em; }
        } @else {
            padding-left: 1.7em;
            &:after { left: 1em; }
        }

        &:after {
            content: "";
            position:absolute;

            /* center vertically */
            top:50%;
            margin-top:-.5*$triangle-width;

            @include triangle($direction: $direction, 
                              $width:$triangle-width,
                              $height:$triangle-height,
                              $color:$arrow-color);
        }
    }
    
    &:hover {
        color: $color-hover;
        background: $bg-hover;
        text-decoration:none;
        cursor:pointer;

        &:after {
            @include triangle($direction:$direction, 
                              $width:$triangle-width,
                              $height:$triangle-height,
                              $color:$arrow-color-hover);
        }
    }

    &:active {
        position:relative;
        color:$color-active;
        background: $bg-active;
        text-decoration:none;
        @include box-shadow( rgba(black,.2) 0 2px 5px 5px inset);

        &:after {
            @include triangle($direction:$direction, 
                              $width:$triangle-width,
                              $height:$triangle-height,
                              $color:$arrow-color-active);
        }
    }

    &:focus {
        @include ui-tab-focus();
    }
}

// Button with an arrow on one side
@mixin ui-button-directional(
    $direction: right,

    $color: $ui-link-block-color,
    $color-hover: $ui-link-block-color-hover,
    $color-active: $ui-link-block-color-active,

    $bg: $ui-link-block-bg,
    $bg-hover: $ui-link-block-bg-hover,
    $bg-active: $ui-link-block-bg-active
) {

    // Due to the rotation, these are opposite (width is height)
    $triangle-width: $line-height-base*1em;
    $triangle-height: $triangle-width / 2;

    // TODO linear gradient?
    position:relative;
    color: $color;
    background: $bg;
    text-decoration:none;
    padding: 0 .5em;
    @include user-select(none);

    // Place arrow on correct side
    @if $direction == right {
        /* round corners opposite arrow */
        @include border-left-radius($border-radius-base);
        &:after {right: 0; margin-right:-$triangle-height;}
    } @else {
        /* round corners opposite arrow */
        @include border-right-radius($border-radius-base);
        &:after {left: 0; margin-left:-$triangle-height;}
    }

    &:after {
        content: "";
        position: absolute;
        top:0;

        @include triangle($direction: $direction, 
                          $width:$triangle-width,
                          $height:$triangle-height,
                          $color:$bg);
    }

    &:hover {
        color: $color-hover;
        background: $bg-hover;
        text-decoration:none;
        cursor:pointer;
        &:after {
            @include triangle($direction: $direction, 
                              $width:$triangle-width,
                              $height:$triangle-height,
                              $color:$bg-hover);
        }
    }

    &:active {
        color: $color-active;
        background: $bg-active;
        text-decoration:none;
        @include box-shadow( rgba(black,.2) 0 2px 5px 5px inset);

        &:after {
            @include box-shadow( rgba(black,.2) 0 2px 5px 5px inset);
            @include triangle($direction: $direction, 
                              $width:$triangle-width,
                              $height:$triangle-height,
                              $color:$bg-active);
        }
    }

    &:focus {
        // TODO improve focus interaction with arrow
        @include ui-tab-focus();
    }
}
